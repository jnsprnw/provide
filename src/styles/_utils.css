/* Utils */

.color-text-base {
	color: var(--color-text-base);
	fill: var(--color-text-base);
}

.color-text-weaker {
	color: var(--color-text-weaker);
	fill: var(--color-text-weaker);
}

.color-theme-stronger {
	color: var(--color-theme-stronger);
	fill: var(--color-theme-stronger);
}
.color-theme-weaker {
	color: var(--color-theme-weaker);
	fill: var(--color-theme-weaker);
}
.color-theme-base {
	color: var(--color-theme-base);
	fill: var(--color-theme-base);
}
.color-text-stronger {
	color: var(--color-text-stronger);
	fill: var(--color-text-stronger);
}
.color-text-base {
	color: var(--color-text-base);
	fill: var(--color-text-base);
}
.color-text-weaker {
	color: var(--color-text-weaker);
	fill: var(--color-text-weaker);
}

.theme-light,
.theme-dark {
	color: var(--color-text-base);
	accent-color: var(--color-theme-base);
	.blendmode-additive {
		mix-blend-mode: var(--color-blend-mode-additive);
	}
	.blendmode-max {
		mix-blend-mode: var(--color-blend-mode-max);
	}
}

.background,
.background-base {
	background-color: var(--color-background-base);
}

.background-weaker {
	background-color: var(--color-background-weaker);
}

.bold {
	font-weight: var(--typography-font-weight-bold);
}

.flex {
	display: flex;
}

.max-content-width {
	max-width: var(--size-max-content-width);
}

.max-paragraph-width {
	max-width: 33em;
	max-width: 55ch;
}

.shadow-s {
	box-shadow: var(--effect-shadow-s);
}

.shadow-m {
	box-shadow: var(--effect-shadow-m);
}

.shadow-l {
	box-shadow: var(--effect-shadow-l);
}

.shadow-xl {
	box-shadow: var(--effect-shadow-xl);
}

.full-size {
	width: 100%;
	height: 100%;
}

.full-width {
	width: 100%;
}

.full-height {
	height: 100%;
}

/* shortcut

  space-m for size-space-m
  font-size-m for size-font-size-m

*/

body,
:where(.size-large),
:where(.size-small),
:where(.size-fluid) {
	@each $s in xxxxs, xxxs, xxs, xs, s, m, l, xl, xxl, xxxl, xxxxl, xxxxxl {
		--space-$(s): var(--size-space-$(s));
	}
	@each $s in xxxxs, xxxs, xxs, xs, s, m, l, xl, xxl, xxxl, xxxxl, xxxxxl {
		--font-size-$(s): var(--size-font-size-$(s));
	}
	font-size: var(--font-size-m);
}

@each $s in xxxxs, xxxs, xxs, xs, s, m, l, xl, xxl, xxxl, xxxxl, xxxxxl {
	.font-size-$(s) {
		font-size: var(--font-size-$(s));
	}
}

/* margins based on spacing vars 
  e.g. 
  m-xxxl -> 
    margin: var(--spacing-xxxl);

  mx-xs -> 
    margin-left: var(--spacing-xs);
    margin-right: var(--spacing-xs);

  etc.

*/
@each $s in xxxxs, xxxs, xxs, xs, s, m, l, xl, xxl, xxxl, xxxxl, xxxxxl {
	.m-$(s) {
		margin: var(--space-$(s));
	}
	.mt-$(s) {
		margin-top: var(--space-$(s));
	}
	.mr-$(s) {
		margin-right: var(--space-$(s));
	}
	.mb-$(s) {
		margin-bottom: var(--space-$(s));
	}
	.ml-$(s) {
		margin-left: var(--space-$(s));
	}
	.mx-$(s) {
		margin-left: var(--space-$(s));
		margin-right: var(--space-$(s));
	}
	.my-$(s) {
		margin-top: var(--space-$(s));
		margin-bottom: var(--space-$(s));
	}

	.mxn-$(s) {
		margin-left: calc(var(--space-$(s)) * -1);
		margin-right: calc(var(--space-$(s)) * -1);
	}
}

/* auto margins */

.m-auto {
	margin: auto;
}
.mt-auto {
	margin-top: auto;
}
.mr-auto {
	margin-right: auto;
}
.mb-auto {
	margin-bottom: auto;
}
.ml-auto {
	margin-left: auto;
}
.mx-auto {
	margin-left: auto;
	margin-right: auto;
}
.my-auto {
	margin-top: auto;
	margin-bottom: auto;
}

/* paddings based on spacing vars 
  e.g. 
  m-xxxl -> 
    padding: var(--spacing-xxxl);

  mx-xs -> 
    padding-left: var(--spacing-xs);
    padding-right: var(--spacing-xs);

  etc.

*/
@each $s in xxxxs, xxxs, xxs, xs, s, m, l, xl, xxl, xxxl, xxxxl, xxxxxl {
	/* indentical padding â€” uses :where so it can be overwritten by more specific rules */
	:where(.p-$(s)) {
		padding: var(--space-$(s));
	}

	.px-$(s) {
		padding-left: var(--space-$(s));
		padding-right: var(--space-$(s));
	}
	.py-$(s) {
		padding-top: var(--space-$(s));
		padding-bottom: var(--space-$(s));
	}

	.pt-$(s) {
		padding-top: var(--space-$(s));
	}
	.pr-$(s) {
		padding-right: var(--space-$(s));
	}
	.pb-$(s) {
		padding-bottom: var(--space-$(s));
	}
	.pl-$(s) {
		padding-left: var(--space-$(s));
	}

	/* negative paddings */
	.pxn-$(s) {
		padding-left: calc(var(--space-$(s)) * -1);
		padding-right: calc(var(--space-$(s)) * -1);
	}
}

.p-0 {
	padding: 0;
}
.pt-0 {
	padding-top: 0;
}
.pr-0 {
	padding-right: 0;
}
.pb-0 {
	padding-bottom: 0;
}
.pl-0 {
	padding-left: 0;
}
.px-0 {
	padding-left: 0;
	padding-right: 0;
}
.py-0 {
	padding-top: 0;
	padding-bottom: 0;
}
